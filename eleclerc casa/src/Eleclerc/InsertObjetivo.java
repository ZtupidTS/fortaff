/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Eleclerc;

import Configuration.configurationJframe;
import Db.DbConnect;
import Db.DbData;
import Type.Family;
import Type.Objetivo;
import Utils.*;
import com.mysql.jdbc.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.TableColumn;
import sun.security.x509.RDN;

/**
 *
 * @author ricardo
 */
public class InsertObjetivo extends javax.swing.JFrame {

    private ArrayList<Family> arFam = new ArrayList<>();
    private ArrayList arObj = new ArrayList();
    private JTable jtable;
    private int daymonth;
    private boolean buttonok = false;
    private int type;
    
    /**
     * Creates new form InsertObjetivo
     * type:
     * 0 : vendas
     * 1 : quebras 
     */
    public InsertObjetivo(int type) {
        initComponents();
        this.type = type;
        this.setTitle("Inserir Objetivos");
        configurationJframe.fullScreen(this);
        try {
            configurationJframe.inicialConfiguration(this);
        } catch (SQLException ex) {
            //Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            Messages.messageErrorDb("ViewQuebrasJFrame : inicialização jframe");
        }        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneObj = new javax.swing.JScrollPane();
        jLabelMonth = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMonthChooser = new com.toedter.calendar.JMonthChooser();
        jYearChooser = new com.toedter.calendar.JYearChooser();
        jButtonOk = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jLabelType = new javax.swing.JLabel();
        jComboBoxType = new javax.swing.JComboBox();
        jButtonSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jLabelMonth.setText("Mês");

        jLabel1.setText("Ano");

        jButtonOk.setText("Ok");
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        jButtonExit.setText("Fechar");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jLabelType.setText("Tipo");

        jComboBoxType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Diario", "Mensal" }));
        jComboBoxType.setSelectedIndex(1);

        jButtonSave.setText("Guardar");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneObj)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelMonth)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jMonthChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jYearChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonOk)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                        .addComponent(jButtonSave)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonExit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabelMonth)
                        .addComponent(jLabel1)
                        .addComponent(jMonthChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jYearChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonOk)
                        .addComponent(jButtonExit)
                        .addComponent(jLabelType)
                        .addComponent(jComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonSave)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPaneObj, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        //elimino todos os dados que contem o array
        arFam.clear(); 
        //meto a minha variavel a true para poder ativar o botão save
        buttonok = true;
        //segundo o tipo de dados pretendidos.
        switch (jComboBoxType.getSelectedIndex())
        {
            case 0:
                //objDay();
                break;
            case 1:
                objMonth();
                break;
        }
    }//GEN-LAST:event_jButtonOkActionPerformed

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        if(buttonok)
        {
            if(Messages.messageQuestion("Pretende Gravar ?", "Aviso") == 0)
            {
                switch(type)
                {
                    case 0:
                        saveVendas();
                        break;
                    case 1:
                        saveQuebras();
                        break;
                }
            }
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed

    /*
     * Método para guardar os objetivos de vendas
     */
    private void saveVendas()
    {
        try {
                    
            //preparo para o roolback
            DbConnect.setAutocommit(false);
            // vou primeiro eliminar os dados existentes
            ResultSet rs = null;
            if(jComboBoxType.getSelectedIndex() == 0)//dia
            {
                rs = (ResultSet) DbData.getDataTable("objetivos", 
                    "YEAR(obj_date) = "+Utils.convertIntegerToString(jYearChooser.getYear())+
                    " AND MONTH(obj_date) = "+Utils.convertIntegerToString(jMonthChooser.getMonth()+1)+
                    " AND obj_type = 'D'", "", "", true);
            }else{//mês
                rs = (ResultSet) DbData.getDataTable("objetivos", 
                    "YEAR(obj_date) = "+Utils.convertIntegerToString(jYearChooser.getYear())+
                    " AND MONTH(obj_date) = "+Utils.convertIntegerToString(jMonthChooser.getMonth()+1)+
                    " AND obj_type = 'M'", "", "", true);
            }
            if(rs.next())
            {
                if(jComboBoxType.getSelectedIndex() == 0)//dia
                {
                    DbData.deleteDataWithRollB("objetivos", "YEAR(obj_date) = "+Utils.convertIntegerToString(jYearChooser.getYear())+
                    " AND MONTH(obj_date) = "+Utils.convertIntegerToString(jMonthChooser.getMonth()+1)+
                    " AND obj_type = 'D'", "");
                }else{//mês
                    DbData.deleteDataWithRollB("objetivos", "YEAR(obj_date) = "+Utils.convertIntegerToString(jYearChooser.getYear())+
                    " AND MONTH(obj_date) = "+Utils.convertIntegerToString(jMonthChooser.getMonth()+1)+
                    " AND obj_type = 'M'", "");
                }                                       
            }
            //recupero os dados do meu jtable
            int[] columnnodata = { 1 };
            ArrayList datajtable = new UtilsTable().getDataJtable(jtable, columnnodata);
            //crio os meus 2 array de dados (colunas e dados)
            ArrayList tempdata = new ArrayList();
            ArrayList tempcolumn = new ArrayList();

            if(jComboBoxType.getSelectedIndex() == 0)//por dia
            {
                int famid = 0;
                boolean next;
                int column = 1;
                for (int j=0;j<datajtable.size();j++)
                {
                    next = true;
                    if(famid == 0)
                    {
                        famid = (Integer) datajtable.get(j);
                        next = false;
                    }
                    if(next)
                    {
                        if(column <= daymonth)
                        {
                            //dados
                            tempdata.add(famid);
                            tempdata.add(Utils.convertIntegerToString(jYearChooser.getYear())+"-"+
                                    Utils.convertIntegerToString(jMonthChooser.getMonth()+1)+"-"+
                                    column);
                            tempdata.add("D");
                            if(datajtable.get(j) == null)
                            {
                                tempdata.add(0.0);
                            }else{
                                tempdata.add(datajtable.get(j));
                            }
                            //colunas
                            tempcolumn.add("obj_fam_id");
                            tempcolumn.add("obj_date");
                            tempcolumn.add("obj_type");
                            tempcolumn.add("obj_value");
                            //para DB
                            DbData.insertDatas("objetivos", tempdata, tempcolumn);
                            tempdata.clear();
                            tempcolumn.clear();
                            if(column == daymonth)
                            {
                                famid = 0;
                                column = 1;
                            }else{
                                column++;
                            }                            
                        }
                    }                    
                }
            }else{//por mês
                int famid = 0;
                boolean next;
                for (int j=0;j<datajtable.size();j++)
                {
                    next = true;
                    if(famid == 0)
                    {
                        famid = (Integer) datajtable.get(j);
                        next = false;
                    }
                    if(next)
                    {
                        //dados
                        tempdata.add(famid);
                        tempdata.add(Utils.convertIntegerToString(jYearChooser.getYear())+"-"+
                                Utils.convertIntegerToString(jMonthChooser.getMonth()+1)+"-"+
                                01);
                        tempdata.add("M");
                        if(datajtable.get(j) == null)
                        {
                            tempdata.add(0.0);
                        }else{
                            tempdata.add(datajtable.get(j));
                        }
                        //colunas
                        tempcolumn.add("obj_fam_id");
                        tempcolumn.add("obj_date");
                        tempcolumn.add("obj_type");
                        tempcolumn.add("obj_value");
                        //para DB
                        DbData.insertDatas("objetivos", tempdata, tempcolumn);
                        tempdata.clear();
                        tempcolumn.clear();
                        famid = 0;                                                           
                    } 
                }
            }
            if(DbData.rollbakcCommit((Connection)DbConnect.getConnection()))
            {
                Messages.messageInformation("Objetivos Guardados", "Informação");
                this.dispose();
            }else{
                Messages.messageError("Problema na gravação dos dados", "Aviso");
            }
        } catch (SQLException ex) {
            //Logger.getLogger(InsertObjetivo.class.getName()).log(Level.SEVERE, null, ex);
            Messages.messageErrorDb("InsertObjectivos: botão save");
        }
    }
    
    /*
     * 
     */
    private void saveQuebras()
    {
        try {
                    
            //preparo para o roolback
            DbConnect.setAutocommit(false);
            // vou primeiro eliminar os dados existentes
            ResultSet rs = null;
            if(jComboBoxType.getSelectedIndex() == 0)//dia
            {
                rs = (ResultSet) DbData.getDataTable("objetivos_quebras", 
                    "YEAR(objq_date) = "+Utils.convertIntegerToString(jYearChooser.getYear())+
                    " AND MONTH(objq_date) = "+Utils.convertIntegerToString(jMonthChooser.getMonth()+1)+
                    " AND objq_type = 'D'", "", "", true);
            }else{//mês
                rs = (ResultSet) DbData.getDataTable("objetivos_quebras", 
                    "YEAR(objq_date) = "+Utils.convertIntegerToString(jYearChooser.getYear())+
                    " AND MONTH(objq_date) = "+Utils.convertIntegerToString(jMonthChooser.getMonth()+1)+
                    " AND objq_type = 'M'", "", "", true);
            }
            if(rs.next())
            {
                if(jComboBoxType.getSelectedIndex() == 0)//dia
                {
                    DbData.deleteDataWithRollB("objetivos_quebras", "YEAR(objq_date) = "+Utils.convertIntegerToString(jYearChooser.getYear())+
                    " AND MONTH(objq_date) = "+Utils.convertIntegerToString(jMonthChooser.getMonth()+1)+
                    " AND objq_type = 'D'", "");
                }else{//mês
                    DbData.deleteDataWithRollB("objetivos_quebras", "YEAR(objq_date) = "+Utils.convertIntegerToString(jYearChooser.getYear())+
                    " AND MONTH(objq_date) = "+Utils.convertIntegerToString(jMonthChooser.getMonth()+1)+
                    " AND objq_type = 'M'", "");
                }                                       
            }
            //recupero os dados do meu jtable
            int[] columnnodata = { 1 };
            ArrayList datajtable = new UtilsTable().getDataJtable(jtable, columnnodata);
            //crio os meus 2 array de dados (colunas e dados)
            ArrayList tempdata = new ArrayList();
            ArrayList tempcolumn = new ArrayList();

            if(jComboBoxType.getSelectedIndex() == 0)//por dia
            {
                int famid = 0;
                boolean next;
                int column = 1;
                for (int j=0;j<datajtable.size();j++)
                {
                    next = true;
                    if(famid == 0)
                    {
                        famid = (Integer) datajtable.get(j);
                        next = false;
                    }
                    if(next)
                    {
                        if(column <= daymonth)
                        {
                            //dados
                            tempdata.add(famid);
                            tempdata.add(Utils.convertIntegerToString(jYearChooser.getYear())+"-"+
                                    Utils.convertIntegerToString(jMonthChooser.getMonth()+1)+"-"+
                                    column);
                            tempdata.add("D");
                            if(datajtable.get(j) == null)
                            {
                                tempdata.add(0.0);
                            }else{
                                tempdata.add(datajtable.get(j));
                            }
                            //colunas
                            tempcolumn.add("objq_fam_id");
                            tempcolumn.add("objq_date");
                            tempcolumn.add("objq_type");
                            tempcolumn.add("objq_value");
                            //para DB
                            DbData.insertDatas("objetivos_quebras", tempdata, tempcolumn);
                            tempdata.clear();
                            tempcolumn.clear();
                            if(column == daymonth)
                            {
                                famid = 0;
                                column = 1;
                            }else{
                                column++;
                            }                            
                        }
                    }                    
                }
            }else{//por mês
                int famid = 0;
                boolean next;
                for (int j=0;j<datajtable.size();j++)
                {
                    next = true;
                    if(famid == 0)
                    {
                        famid = (Integer) datajtable.get(j);
                        next = false;
                    }
                    if(next)
                    {
                        //dados
                        tempdata.add(famid);
                        tempdata.add(Utils.convertIntegerToString(jYearChooser.getYear())+"-"+
                                Utils.convertIntegerToString(jMonthChooser.getMonth()+1)+"-"+
                                01);
                        tempdata.add("M");
                        if(datajtable.get(j) == null)
                        {
                            tempdata.add(0.0);
                        }else{
                            tempdata.add(datajtable.get(j));
                        }
                        //colunas
                        tempcolumn.add("objq_fam_id");
                        tempcolumn.add("objq_date");
                        tempcolumn.add("objq_type");
                        tempcolumn.add("objq_value");
                        //para DB
                        DbData.insertDatas("objetivos_quebras", tempdata, tempcolumn);
                        tempdata.clear();
                        tempcolumn.clear();
                        famid = 0;                                                           
                    } 
                }
            }
            if(DbData.rollbakcCommit((Connection)DbConnect.getConnection()))
            {
                Messages.messageInformation("Objetivos Guardados", "Informação");
            }else{
                Messages.messageError("Problema na gravação dos dados", "Aviso");
            }
        } catch (SQLException ex) {
            //Logger.getLogger(InsertObjetivo.class.getName()).log(Level.SEVERE, null, ex);
            Messages.messageErrorDb("InsertObjectivos: botão save");
        }
    }
    
    //para preencher objetivos diarios
//    private void objDay()
//    {
//        try {
//            //primeiro adiciono todas as secção e subsecção
//            arFam = new UtilsJframe().arSubSection();
//            
//            daymonth = UtilsDate.dayOfMonth(jMonthChooser.getMonth());
//            //preenchimento da jtable
//            Object[][] donnees = new Object[arFam.size()][daymonth+2];
//            for(int i=0;i<arFam.size();i++)
//            {
//                Family fam = arFam.get(i);
//                donnees[i][0] = fam.getFamId();
//                donnees[i][1] = fam.getFamDescription();
//                ResultSet rsObj = (ResultSet) DbData.getDataTable("objetivos", 
//                    "Year(obj_date) = '"+ Utils.convertIntegerToString(jYearChooser.getYear())+
//                    "' AND MONTH(obj_date) = '"+ Utils.convertIntegerToString(jMonthChooser.getMonth()+1)+
//                    "' AND obj_fam_id = '"+fam.getFamId()+"' AND obj_type = 'D'",
//                    "", "obj_date", true);
//                
//                boolean data = false;
//                int m = 1;
//                
//                while(rsObj.next())
//                {
//                    data = true;
//                    int day = UtilsDate.getDay(rsObj.getDate("obj_date"));
//                    
//                    while (m < day)
//                    {
//                        donnees[i][m+1] = 0.00;
//                        m++;
//                    }
//                    donnees[i][m+1] = rsObj.getDouble("obj_value");
//                    m++;
//                    //System.out.println(rsObj.getDouble("obj_value"));
//                }
//                if(data && m < daymonth)
//                {
//                    while (m <= daymonth)
//                    {
//                        donnees[i][m+1] = 0.00;
//                        m++;
//                    }
//                }                
//                if(!data)
//                {
//                    for(int j = 2;j<=daymonth+1;j++)
//                    {
//                        donnees[i][j] = 0.00;
//                    }
//                }
//            }
//            //cabeçalho tabela
//            String[] entetes = new String[daymonth+2];
//            entetes[0] = " ";
//            entetes[1] = " ";
//            int k;
//            int days = 1;
//            for(k=0;k<daymonth;k++)
//            {
//                entetes[k+2] = Utils.convertIntegerToString(days);
//                days++;
//            }            
//            //edição colunas
//            int[] coledit = new int[daymonth];
//            for(int m=0;m<daymonth;m++)
//            {
//                coledit[m] = m+2;
//                //coledit[m] = m;
//            }
//            jtable = new UtilsTable().FillJTable(donnees, entetes, coledit, 0);
//            //ajusto das colunas da jtable
//            int[] column = { 0, 1 };
//            int[] width = { 60, 380};
//            jScrollPaneObj.setViewportView(new UtilsTable().adjustColumn(jtable, column, width));
//            
//        } catch (SQLException ex) {
//            //Logger.getLogger(InsertObjetivo.class.getName()).log(Level.SEVERE, null, ex);
//            Messages.messageErrorDb("InsertObjectivo : botão ok");
//        }
//    }
    
    //para preencher objetivos mensais
    private void objMonth()
    {
        switch(type)
        {
            case 0:
                objVendas();
                break;
            case 1:
                objQuebras();
                break;
        }
        //ajusto das colunas da jtable
        int[] column = { 0, 1 };
        int[] width = { 60, 450};
        jScrollPaneObj.setViewportView(new UtilsTable().adjustColumn(jtable, column, width));
    }
    
    /*
     * Permite preencher os objetivos de vendas mensais
     */
    private void objVendas()
    {
        try {
            //primeiro adiciono todas as secção e subsecção
            arFam = new UtilsJframe().arSubSection();
            //preenchimento da jtable
            Object[][] donnees = new Object[arFam.size()][3];
            for(int i=0;i<arFam.size();i++)
            {
                Family fam = arFam.get(i);
                donnees[i][0] = fam.getFamId();
                donnees[i][1] = fam.getFamDescription();
                ResultSet rsObj = (ResultSet) DbData.getDataTable("objetivos", 
                    "Year(obj_date) = '"+ Utils.convertIntegerToString(jYearChooser.getYear())+
                    "' AND MONTH(obj_date) = '"+ Utils.convertIntegerToString(jMonthChooser.getMonth()+1)+
                    "' AND obj_fam_id = '"+fam.getFamId()+"' AND obj_type = 'M'",
                    "", "obj_date", true);
                
                boolean data = false;
                
                while(rsObj.next())
                {
                    data = true;
                    donnees[i][2] = rsObj.getDouble("obj_value");                    
                }
                if(!data)
                {
                    donnees[i][2] = 0.00;
                }
            }
            //cabeçalho tabela
            String[] entetes = new String[3];
            entetes[0] = " ";
            entetes[1] = " ";
            entetes[2] = "Objetivo";                        
            //edição colunas
            int coledit = 2;
            jtable = new UtilsTable().FillJTable(donnees, entetes, coledit, 0);
            
        } catch (SQLException ex) {
            //Logger.getLogger(InsertObjetivo.class.getName()).log(Level.SEVERE, null, ex);
            Messages.messageErrorDb("InsertObjectivo : botão ok");
        }
    }
    
    /*
     * Permite preencher os objetivos de quebras mensais
     */
    private void objQuebras()
    {
        try {
            //primeiro adiciono todas as secção e subsecção
            arFam = new UtilsJframe().arSubSection();
            //preenchimento da jtable
            Object[][] donnees = new Object[arFam.size()][3];
            for(int i=0;i<arFam.size();i++)
            {
                Family fam = arFam.get(i);
                donnees[i][0] = fam.getFamId();
                donnees[i][1] = fam.getFamDescription();
                ResultSet rsObjq = (ResultSet) DbData.getDataTable("objetivos_quebras", 
                    "Year(objq_date) = '"+ Utils.convertIntegerToString(jYearChooser.getYear())+
                    "' AND MONTH(objq_date) = '"+ Utils.convertIntegerToString(jMonthChooser.getMonth()+1)+
                    "' AND objq_fam_id = '"+fam.getFamId()+"' AND objq_type = 'M'",
                    "", "objq_date", true);
                
                boolean data = false;
                
                while(rsObjq.next())
                {
                    data = true;
                    donnees[i][2] = rsObjq.getDouble("objq_value");                    
                }
                if(!data)
                {
                    donnees[i][2] = 0.00;
                }
            }
            //cabeçalho tabela
            String[] entetes = new String[3];
            entetes[0] = " ";
            entetes[1] = " ";
            entetes[2] = "Objetivo";                        
            //edição colunas
            int coledit = 2;
            jtable = new UtilsTable().FillJTable(donnees, entetes, coledit, 0);
            
        } catch (SQLException ex) {
            //Logger.getLogger(InsertObjetivo.class.getName()).log(Level.SEVERE, null, ex);
            Messages.messageErrorDb("InsertObjectivo : botão ok");
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JComboBox jComboBoxType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelMonth;
    private javax.swing.JLabel jLabelType;
    private com.toedter.calendar.JMonthChooser jMonthChooser;
    private javax.swing.JScrollPane jScrollPaneObj;
    private com.toedter.calendar.JYearChooser jYearChooser;
    // End of variables declaration//GEN-END:variables
}
