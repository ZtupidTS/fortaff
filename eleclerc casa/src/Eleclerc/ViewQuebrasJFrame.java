/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Eleclerc;

import Type.Family;
import Configuration.configurationJframe;
import Db.DbData;
import Type.TypeQuebras;
import Utils.*;
import java.awt.BorderLayout;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author ricardo
 */
public class ViewQuebrasJFrame extends javax.swing.JFrame {

    private Family fam;
    private TypeQuebras tq;
    
    /**
     * Creates new form ViewQuebrasJFrame
     */
    public ViewQuebrasJFrame() {
        initComponents();
        this.setTitle("Selecção Quebras");
        configurationJframe.fullScreen(this);
        try {
            configurationJframe.inicialConfiguration(this);
        } catch (SQLException ex) {
            //Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
            Messages.messageErrorDb("ViewQuebrasJFrame : inicialização jframe");
        }
        hideSelection();
        fillCombobox();
        selectionFilter();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonExit = new javax.swing.JButton();
        jButtonOk = new javax.swing.JButton();
        jLabelSection = new javax.swing.JLabel();
        jMonthChooser = new com.toedter.calendar.JMonthChooser();
        jLabelMonth = new javax.swing.JLabel();
        jYearChooserYear = new com.toedter.calendar.JYearChooser();
        jLabelYear = new javax.swing.JLabel();
        jComboBoxSelection = new javax.swing.JComboBox();
        jLabelSelection = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jLabelDate1 = new javax.swing.JLabel();
        jLabelDate2 = new javax.swing.JLabel();
        jComboBoxSection = new javax.swing.JComboBox();
        jPanelGraph = new javax.swing.JPanel();
        jLabelValueQuebra = new javax.swing.JLabel();
        jLabelTypeQuebras = new javax.swing.JLabel();
        jComboBoxTypeQuebras = new javax.swing.JComboBox();
        jLabelPorcentQuebras = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButtonExit.setText("Fechar");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jButtonOk.setText("Ok");
        jButtonOk.setMaximumSize(new java.awt.Dimension(75, 23));
        jButtonOk.setMinimumSize(new java.awt.Dimension(75, 23));
        jButtonOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jButtonOk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonOkMouseClicked(evt);
            }
        });

        jLabelSection.setText("Secção");

        jLabelMonth.setText("Mês");

        jLabelYear.setText("Ano");

        jComboBoxSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ano", "Mês" }));
        jComboBoxSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSelectionActionPerformed(evt);
            }
        });

        jLabelSelection.setText("Selecção");

        jLabelDate1.setText("Primeira Data");

        jLabelDate2.setText("Segunda Data");

        javax.swing.GroupLayout jPanelGraphLayout = new javax.swing.GroupLayout(jPanelGraph);
        jPanelGraph.setLayout(jPanelGraphLayout);
        jPanelGraphLayout.setHorizontalGroup(
            jPanelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelGraphLayout.setVerticalGroup(
            jPanelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 332, Short.MAX_VALUE)
        );

        jLabelTypeQuebras.setText("Tipo de Quebras");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelSection)
                                .addGap(48, 48, 48)
                                .addComponent(jComboBoxSection, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelDate1)
                                    .addComponent(jLabelMonth))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jMonthChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelSelection)
                            .addComponent(jLabelYear)
                            .addComponent(jLabelDate2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxSelection, 0, 147, Short.MAX_VALUE)
                            .addComponent(jYearChooserYear, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelTypeQuebras)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxTypeQuebras, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 62, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonOk, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonExit)
                                .addGap(33, 33, 33)
                                .addComponent(jLabelValueQuebra, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelPorcentQuebras, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSection)
                    .addComponent(jComboBoxSection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSelection)
                    .addComponent(jLabelTypeQuebras)
                    .addComponent(jComboBoxTypeQuebras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jYearChooserYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelYear)
                    .addComponent(jMonthChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMonth, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDate1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonOk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonExit)
                            .addComponent(jLabelValueQuebra)
                            .addComponent(jLabelPorcentQuebras)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabelDate2)
                        .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14)
                .addComponent(jPanelGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jComboBoxSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSelectionActionPerformed
        // TODO add your handling code here:
        selectionFilter();
    }//GEN-LAST:event_jComboBoxSelectionActionPerformed

    private void jButtonOkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonOkMouseClicked
        //Para por vazio o jpanel do grafico
        fam = (Family)jComboBoxSection.getSelectedItem();
        tq = (TypeQuebras)jComboBoxTypeQuebras.getSelectedItem();
        jPanelGraph.removeAll();
        this.repaint();
        
        int select = jComboBoxSelection.getSelectedIndex();
        if(select == 1)
        {
            monthSelection();
        }
        if(select == 2)
        {
            //intervalo de datas
            //System.out.println("datas");
        }
        if(select == 0)
        {
            yearSelection();              
        }
    }//GEN-LAST:event_jButtonOkMouseClicked

    /*
     * Método para a selecção ao mês
     */
    private void monthSelection()
    {
        try {
            ArrayList<Number> value = new ArrayList<Number>();
            String[] column = new String[3];
            column[0] = "SUM(que_valor) AS que_valor";
            column[1] = "que_fam_id";
            column[2] = "que_date";
            
            ResultSet rs = null;
            ResultSet rsValue = null;
            if(fam.getFamId() == 0)
            {
                
                if(tq.getTypeQuebrasId() == 0)
                {
                    String[] where = { "MONTH(que_date)", Utils.convertIntegerToString(jMonthChooser.getMonth()+1),
                        "YEAR(que_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()),
                        new UtilsDb().getWhere("que_fam_id", 0)};
                    rs = (ResultSet)DbData.getDataTableGroupByDistinctMoreWhere("quebras", where,
                        "que_date", "que_date", "", column, true);
                    
                }else{
                    String[] where = { "MONTH(que_date)", Utils.convertIntegerToString(jMonthChooser.getMonth()+1),
                        "YEAR(que_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()),
                        "que_tq_id", Utils.convertIntegerToString(tq.getTypeQuebrasId()),
                        new UtilsDb().getWhere("que_fam_id", 0)};
                    rs = (ResultSet)DbData.getDataTableGroupByDistinctMoreWhere("quebras", where,
                        "que_date", "que_date", "", column, true);
                }
            }else{
                if(tq.getTypeQuebrasId() == 0)
                {
                    String[] where = { "MONTH(que_date)", Utils.convertIntegerToString(jMonthChooser.getMonth()+1),
                        "que_fam_id", Utils.convertIntegerToString(fam.getFamId()), "YEAR(que_date)", Utils.convertIntegerToString(jYearChooserYear.getYear())};
            
                    rs = (ResultSet) DbData.getDataTableGroupByDistinctMoreWhere("quebras", where,
                        "que_date", "que_date", "que_fam_id", column, true);
                }else{
                    String[] where = { "MONTH(que_date)", Utils.convertIntegerToString(jMonthChooser.getMonth()+1),
                        "que_fam_id", Utils.convertIntegerToString(fam.getFamId()),
                        "que_tq_id", Utils.convertIntegerToString(tq.getTypeQuebrasId()),
                        "YEAR(que_date)", Utils.convertIntegerToString(jYearChooserYear.getYear())};            
                    rs = (ResultSet) DbData.getDataTableGroupByDistinctMoreWhere("quebras", where,
                        "que_date", "que_date", "que_fam_id", column, true);
                }                
            }            
            
            int i = 1;
            boolean valueexist = false;
            while(rs.next())
            {
                valueexist = true;
                int day = UtilsDate.getDay(rs.getDate("que_date"));
                //nos dias em que não há quebras meto o valor 0
                while(i < day)
                {
                    value.add(0);
                    i++;
                }
                //se existe quebras meto o valor da quebras
                if (i == day)
                {
                    value.add(rs.getDouble("que_valor"));
                    i++;
                }
            }
            while (i <= UtilsDate.dayOfMonth(jMonthChooser.getMonth()+1) && valueexist)
            {
                value.add(0);
                i++;
            }
            //caso não há quebras nos dias restantes do mês completo com 0 o array
            if(i != UtilsDate.dayOfMonth(jMonthChooser.getMonth()+1) && valueexist)
            {
                while (i <= UtilsDate.dayOfMonth(jMonthChooser.getMonth()+1))
                {
                    value.add(0);
                    i++;
                }
            }
            if(fam.getFamId() == 0 && valueexist)
            {
                if(tq.getTypeQuebrasId() == 0)
                {
                    String[] where2 = {"MONTH(que_date)", Utils.convertIntegerToString(jMonthChooser.getMonth()+1),
                        "YEAR(que_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()),
                        new UtilsDb().getWhere("que_fam_id", 0) };
                    rsValue = (ResultSet) DbData.getSumColuna("quebras", where2, "que_valor"); 
                }else{
                    String[] where2 = {"MONTH(que_date)", Utils.convertIntegerToString(jMonthChooser.getMonth()+1),
                        "YEAR(que_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()),
                        "que_tq_id", Utils.convertIntegerToString(tq.getTypeQuebrasId()),
                        new UtilsDb().getWhere("que_fam_id", 0) };
                    rsValue = (ResultSet) DbData.getSumColuna("quebras", where2, "que_valor"); 
                }
                               
            }
            if(fam.getFamId() != 0 && valueexist)
            {
                if(tq.getTypeQuebrasId() == 0)
                {
                    String[] where2 = {"MONTH(que_date)", Utils.convertIntegerToString(jMonthChooser.getMonth()+1),
                        "YEAR(que_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()),
                        "que_fam_id", Utils.convertIntegerToString(fam.getFamId())};
                    rsValue = (ResultSet) DbData.getSumColuna("quebras", where2, "que_valor");
                }else{
                    String[] where2 = {"MONTH(que_date)", Utils.convertIntegerToString(jMonthChooser.getMonth()+1),
                        "YEAR(que_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()),
                        "que_tq_id", Utils.convertIntegerToString(tq.getTypeQuebrasId()),
                        "que_fam_id", Utils.convertIntegerToString(fam.getFamId())};
                    rsValue = (ResultSet) DbData.getSumColuna("quebras", where2, "que_valor");
                }                                
            }
            double valtotal = 0;
            if(valueexist)
            {
                while(rsValue.next())
                {
                    valtotal = rsValue.getDouble("que_valor");
                    jLabelValueQuebra.setText("Valor total mês: "+Utils.convertDoubleToString(valtotal)+" €");                    
                }
            }            
            //porcentagem da quebras referente ao valor das vendas
            ResultSet rsPorcent = null;
            if(fam.getFamId() == 0 && valueexist)
            {
                String[] wherePorcent = {"MONTH(ve_date)", Utils.convertIntegerToString(jMonthChooser.getMonth()+1),
                        "YEAR(ve_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()),
                        new UtilsDb().getWhere("ve_fam_id", 0)};
                rsPorcent = (ResultSet) DbData.getSumColuna("vendas", wherePorcent, "ve_valor");
            }
            if(fam.getFamId() != 0 && valueexist)
            {
                String[] wherePorcent = {"MONTH(ve_date)", Utils.convertIntegerToString(jMonthChooser.getMonth()+1),
                        "YEAR(ve_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()),
                        "ve_fam_id", Utils.convertIntegerToString(fam.getFamId())};
                rsPorcent = (ResultSet) DbData.getSumColuna("vendas", wherePorcent, "ve_valor");
            }            
            if(valueexist)
            {
                while(rsPorcent.next())
                {
                    jLabelPorcentQuebras.setText("Porcentagem Quebras/Vendas : "+new DecimalFormat("0.00").format(((valtotal*100)/rsPorcent.getDouble("ve_valor")))+"%");
                    //Messages.messageInformation(Utils.convertDoubleToString(rsPorcent.getDouble("ve_valor")), "test");
                }
            }
            //preparo o jpanel
            jPanelGraph.setLayout(new java.awt.BorderLayout());
            //se não há dados na BD não dou nada
            if (!valueexist)
            {
                Messages.messageInformation("Não existe quebras para esse tipo de filtros", "Informação"); 
                jLabelPorcentQuebras.setText("");
                jLabelValueQuebra.setText("");
            }else{
                jPanelGraph.add(new UtilsGraph().CreateBarSimple(value, UtilsDate.dayOfMonth(jMonthChooser.getMonth()+1), "Valor",
                    "Quebras "+(jMonthChooser.getMonth()+1)+"-"+jYearChooserYear.getYear(), "Dias", "Valor"),BorderLayout.CENTER);
                jPanelGraph.validate();            
            }
        } catch (SQLException ex) {
            //Logger.getLogger(ViewQuebrasJFrame.class.getName()).log(Level.SEVERE, null, ex);
            Messages.messageErrorDb("ViewQuebrasJFrame : monthSelection");
        }
    }
    
    /*
     * Caso seja seleccionado o ano
     */
    private void yearSelection()
    {
        try {
            ArrayList<Number> value = new ArrayList<Number>();
            String[] column = new String[3];
            column[0] = "SUM(que_valor) AS que_valor";
            column[1] = "que_fam_id";
            column[2] = "que_date";
            
            ResultSet rs = null;
            ResultSet rsValue = null;
            if(fam.getFamId() == 0)
            {
                if(tq.getTypeQuebrasId() == 0)
                {
                    String[] where = { "YEAR(que_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()), 
                        new UtilsDb().getWhere("que_fam_id", 0)};
                    rs = (ResultSet)DbData.getDataTableGroupByDistinctMoreWhere("quebras", where,
                        "que_date", "month(que_date)", "", column, true);
                }else{
                    String[] where = { "YEAR(que_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()),
                        "que_tq_id", Utils.convertIntegerToString(tq.getTypeQuebrasId()),
                        new UtilsDb().getWhere("que_fam_id", 0)};
                    rs = (ResultSet)DbData.getDataTableGroupByDistinctMoreWhere("quebras", where,
                        "que_date", "month(que_date)", "", column, true);
                }                
            }else{
                if(tq.getTypeQuebrasId() == 0)
                {
                    String[] where = { "YEAR(que_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()),
                        "que_fam_id", Utils.convertIntegerToString(fam.getFamId())};
                    rs = (ResultSet) DbData.getDataTableGroupByDistinctMoreWhere("quebras", where,
                    "que_date", "Month(que_date)", "", column, true);
                }else{
                    String[] where = { "YEAR(que_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()),
                        "que_tq_id", Utils.convertIntegerToString(tq.getTypeQuebrasId()),
                        "que_fam_id", Utils.convertIntegerToString(fam.getFamId())};
                    rs = (ResultSet) DbData.getDataTableGroupByDistinctMoreWhere("quebras", where,
                    "que_date", "Month(que_date)", "", column, true);
                }                
            }            
            
            int i = 1;
            boolean valueexist = false;
            while(rs.next())
            {
                valueexist = true;
                int month = UtilsDate.getMonth(rs.getDate("que_date"));
                //no mês em que não há quebras meto o valor 0
                while(i < month)
                {
                    value.add(0);
                    i++;
                }
                //se existe quebras meto o valor da quebras
                if (i == month)
                {
                    value.add(rs.getDouble("que_valor"));
                    i++;
                }
            }
            //caso não há quebras nos dias restantes do mês completo com 0 o array
            while(i < 13 && valueexist)
            {
                value.add(0);
                i++;
            }
            if(fam.getFamId() == 0 && valueexist)
            {
                if(tq.getTypeQuebrasId() == 0)
                {
                    String[] where2 = {"YEAR(que_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()),
                        new UtilsDb().getWhere("que_fam_id", 0) };
                    rsValue = (ResultSet) DbData.getSumColuna("quebras", where2, "que_valor");  
                }else{
                    String[] where2 = {"YEAR(que_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()),
                        "que_tq_id", Utils.convertIntegerToString(tq.getTypeQuebrasId()),
                        new UtilsDb().getWhere("que_fam_id", 0) };
                    rsValue = (ResultSet) DbData.getSumColuna("quebras", where2, "que_valor"); 
                }                              
            }
            if(fam.getFamId() != 0 && valueexist)
            {
                if(tq.getTypeQuebrasId() == 0)
                {
                    String[] where2 = {"YEAR(que_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()),
                        "que_fam_id", Utils.convertIntegerToString(fam.getFamId())};
                    rsValue = (ResultSet) DbData.getSumColuna("quebras", where2, "que_valor");
                }else{
                    String[] where2 = {"YEAR(que_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()),
                        "que_tq_id", Utils.convertIntegerToString(tq.getTypeQuebrasId()),
                        "que_fam_id", Utils.convertIntegerToString(fam.getFamId())};
                    rsValue = (ResultSet) DbData.getSumColuna("quebras", where2, "que_valor");
                }                                
            }
            double valtotal = 0;
            //valor total das quebras
            if(valueexist)
            {
                while(rsValue.next())
                {
                    valtotal = rsValue.getDouble("que_valor");
                    jLabelValueQuebra.setText("Valor total ano: "+Utils.convertDoubleToString(valtotal)+" €");                    
                }
            }
            //porcentagem da quebras referente ao valor das vendas
            ResultSet rsPorcent = null;
            if(fam.getFamId() == 0 && valueexist)
            {
                String[] wherePorcent = {"YEAR(ve_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()),
                            new UtilsDb().getWhere("ve_fam_id", 0)};
                rsPorcent = (ResultSet) DbData.getSumColuna("vendas", wherePorcent, "ve_valor");
            }
            if(fam.getFamId() != 0 && valueexist)
            {
                String[] wherePorcent = {"YEAR(ve_date)", Utils.convertIntegerToString(jYearChooserYear.getYear()),
                        "ve_fam_id", Utils.convertIntegerToString(fam.getFamId())};
                rsPorcent = (ResultSet) DbData.getSumColuna("vendas", wherePorcent, "ve_valor");
            }            
            if(valueexist)
            {
                while(rsPorcent.next())
                {
                    jLabelPorcentQuebras.setText("Porcentagem Quebras/Vendas : "+new DecimalFormat("0.00").format(((valtotal*100)/rsPorcent.getDouble("ve_valor")))+"%");
                    //Messages.messageInformation(Utils.convertDoubleToString(rsPorcent.getDouble("ve_valor")), "test");
                }
            }
            //preparo o jpanel
            jPanelGraph.setLayout(new java.awt.BorderLayout());
            //se não há dados na BD não dou nada
            if (!valueexist)
            {
                Messages.messageInformation("Não existe quebras para esse ano", "Informação");
                jLabelPorcentQuebras.setText("");
                jLabelValueQuebra.setText("");
            }else{
                jPanelGraph.add(new UtilsGraph().CreateBarSimple(value, 12, "Valor",
                    "Quebras "+jYearChooserYear.getYear(), "Mês", "Valor"),BorderLayout.CENTER);
                jPanelGraph.validate();            
            }
        } catch (SQLException ex) {
            //Logger.getLogger(ViewQuebrasJFrame.class.getName()).log(Level.SEVERE, null, ex);
            Messages.messageErrorDb("ViewQuebrasJFrame : yearSelection");
        }
    }
    
    /*
     * Esconde tudo
     */
    private void hideSelection()
    {
        //intervalo de datas
        jDateChooser1.setVisible(false);
        jDateChooser2.setVisible(false);
        jLabelDate1.setVisible(false);
        jLabelDate2.setVisible(false);
        //mês
        jLabelMonth.setVisible(false);
        jLabelYear.setVisible(false);
        jMonthChooser.setVisible(false);
        jYearChooserYear.setVisible(false);
    }
    
    /*
     * Preenche a combobox com as secções
     */
    private void fillCombobox()
    {
        new UtilsJframe().fillComboObject(jComboBoxSection, true, "family", "fam_id", "fam_description");  
        new UtilsJframe().fillComboObject(jComboBoxTypeQuebras, true, "tipo_quebras", "tq_id", "tq_description");  
    }
    
    /*
     * Volta a aparecer os campos para a selecção
     */
    private void selectionFilter()
    {
        int select = jComboBoxSelection.getSelectedIndex();
        //ano
        if(select == 0)
        {
            hideSelection();
            jLabelYear.setVisible(true);
            jYearChooserYear.setVisible(true);
        }
        //mês
        if(select == 1)
        {
            hideSelection();
            jLabelMonth.setVisible(true);
            jLabelYear.setVisible(true);
            jMonthChooser.setVisible(true);
            jYearChooserYear.setVisible(true);
        }
        //intervalo de datas
        if(select == 2)
        {
            hideSelection();
            jDateChooser1.setVisible(true);
            jDateChooser2.setVisible(true);
            jLabelDate1.setVisible(true);
            jLabelDate2.setVisible(true);
        }        
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JComboBox jComboBoxSection;
    private javax.swing.JComboBox jComboBoxSelection;
    private javax.swing.JComboBox jComboBoxTypeQuebras;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabelDate1;
    private javax.swing.JLabel jLabelDate2;
    private javax.swing.JLabel jLabelMonth;
    private javax.swing.JLabel jLabelPorcentQuebras;
    private javax.swing.JLabel jLabelSection;
    private javax.swing.JLabel jLabelSelection;
    private javax.swing.JLabel jLabelTypeQuebras;
    private javax.swing.JLabel jLabelValueQuebra;
    private javax.swing.JLabel jLabelYear;
    private com.toedter.calendar.JMonthChooser jMonthChooser;
    private javax.swing.JPanel jPanelGraph;
    private com.toedter.calendar.JYearChooser jYearChooserYear;
    // End of variables declaration//GEN-END:variables
}
